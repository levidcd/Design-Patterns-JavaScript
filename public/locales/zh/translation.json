{
  "Start Game": "开始游戏",
  "Game": "游戏",
  "Pattern Reference": "参考",
  "About": "关于",
  "Back to Patterns List": "返回模式列表",
  "Design Patterns Game": "设计模式游戏",
  "\"Gang of Four\" patterns in JavaScript": "JavaScript 中的 GOF 设计模式",
  "The Game": "游戏介绍",
  "Design Patterns": "设计模式",
  "pattern": "模式",
  "Design Patterns Desc": "在软件工程中，设计模式是软件设计中常见问题的可重复解决方案。（俗称套路。",
  "Design Patterns Intro": "熟悉在JavaScript中实现的设计模式，用来测试自己（或其他人）或只是为了好玩🤣",
  "References": "引用",
  "Felipe Beline References": "所有的示例代码来自于",
  "Addy Osmani References": "如果你想深入了解这个主题，推荐 Addy Osmani的",
  "Game Intro1": "每个问题都包含一个代码片段和四个答案选项。",
  "Game Intro2": "仔细查看代码并选择一个正确答案。",
  "Game Intro3": "回答全部23个问题后你会看到你的测试结果",
  "Type": "类型",
  "Definition": "定义",
  "Use When": "使用场景",
  "creational": "创建型",
  "creational_desc": "这些设计模式都与类实例化有关。此模式可以细分为类创建模式和对象创建模式。类创建模式在实例化过程中使用继承，而对象创建模式使用委派。",
  "structural": "结构型",
  "structural_desc": "这些设计模式都是关于类和对象组合的。结构类创建模式使用继承来组合接口。结构对象模式定义了组合对象以获取新功能的方法。",
  "behavioral": "行为型",
  "behavioral_desc": "这些设计模式都是关于类的对象通信。行为模式是最具体关注对象之间通信的模式",
  "Abstract Factory": "抽象工厂(Abstract Factory)",
  "Builder": "建造者(Builder)",
  "Factory": "工厂(Factory)",
  "Prototype": "原型(Prototype)",
  "Singleton": "单例(Singleton)",
  "Adapter": "适配器(Adapter)",
  "Bridge": "桥接(Bridge)",
  "Composite": "组合(Composite)",
  "Decorator": "装饰器(Decorator)",
  "Facade": "外观(Facade)",
  "Flyweight": "享元(Flyweight)",
  "Proxy": "代理(Proxy)",
  "Chain of Responsibility": "职责链(Chain of Responsibility)",
  "Command": "命令(Command)",
  "Interpreter": "解释器(Interpreter)",
  "Iterator": "迭代器(Iterator)",
  "Mediator": "中介者(Mediator)",
  "Memento": "备忘录(Memento)",
  "Observer": "观察者(Observer)",
  "State": "状态(State)",
  "Strategy": "策略(Strategy)",
  "Template": "模板(Template)",
  "Visitor": "访问者(Visitor)",
  "Try Again": "再试一次"
}
